{"version":3,"file":"public/scripts/app.js","sources":["app/application.coffee","app/drone.coffee","app/visualizer.coffee"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9BA;GCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnKA;GCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9CA","sourcesContent":["Drone = require 'drone'\nVisualizer = require 'visualizer'\n\nmodule.exports = class Application\n\n  constructor: ->\n    AudioContext = window.webkitAudioContext or window.AudioContext\n    throw 'WebAudio support required' unless AudioContext\n    context = new AudioContext\n    @drone = new Drone context\n    @visualizer = new Visualizer 'html'\n    @initialize()\n\n  initialize: ->\n    @visualizer.render()\n    @drone.play()\n\nwindow.app = new Application\n","#\n# A drone noise generator using the Web Audio API.\n#\n# By [William Meleyal](http://meleyal.com), algorithm based on [Javascript Drone](http://matt-diamond.com/drone.html) by Matt Diamond.\n#\n\nmodule.exports = class Drone\n\n  # Shortcuts for Math methods.\n  { random, floor, pow } = Math\n\n  # Define the [musical scale](http://goo.gl/O3S91) that notes are selected from.\n  scale:\n    [ 0, 2, 4, 6, 7, 9, 11, 12, 14 ]\n\n  # Connect to the provided `AudioContext`.\n  constructor: (@context) ->\n    throw 'AudioContext required' unless @context\n    @noiseNodes = []\n    @createOutput()\n\n  # Start generating.\n  play: ->\n    @stop()\n    @generate()\n    true\n\n  # Stop generating.\n  stop: ->\n    @noiseNodes.pop().disconnect() while @noiseNodes.length\n    true\n\n  # Destroy and cleanup.\n  destroy: ->\n    @stop()\n    @output.disconnect @context.destination\n\n  # Connect the main audio output.\n  createOutput: ->\n    @output = @context.createGainNode()\n    @output.gain.value = 20.0\n    @output.connect @context.destination\n\n  # Generate the drone using a random `toneCount`.\n  # The frequency of all tones are based on the `baseNote`.\n  generate: ->\n    @toneCount or= _.random 1, 40\n    @baseNote or= _.random 40, 70\n\n    for i in [0..@toneCount] by 1\n      @createTone @randomFreq()\n\n  # Generate a random frequency.\n  #Â TODO: document why rand is needed.\n  randomFreq: ->\n    note = @randomNote()\n    freq = @midiToFreq note\n    rand = (random() * 4) - 2\n    freq += rand\n\n  # Generate a random note relative to the `baseNote`.\n  # Notes are picked from the scale to ensure harmony.\n  randomNote: ->\n    idx = floor(random() * @scale.length)\n    degree = @scale[idx]\n    @baseNote + degree\n\n  # Generate random 3D (`x,y,z`) coordinates.\n  randomCoords: ->\n    [min, max] = [-20, 20]\n    _.random(min, max) for i in [0..2]\n\n  # Convert midi note number to frequency.\n  # Based on [`mtof()`](http://goo.gl/8KS8M) from ChucK/PD.\n  midiToFreq: (number) ->\n    exponent = (number - 69) / 12\n    pow(2, exponent) * 440\n\n  # Create a tone from the combination of a panner, filter, and noise generator node.\n  createTone: (freq) ->\n    panner = @createPanner()\n    panner.connect @output\n    filter = @createFilter freq\n    filter.connect panner\n    noiseGen = @createNoiseGen()\n    noiseGen.connect filter\n\n  # Create a [panner](http://goo.gl/DilZN) to position the sound in 3D space.\n  # Randomize the position of the sound every half second to prevent sounds 'merging'.\n  createPanner: ->\n    panner = @context.createPanner()\n    [x,y,z] = @randomCoords()\n    panner.setPosition x,y,z\n    movePan = => @randomizePan panner, [x,y,z]\n    setInterval movePan, 500\n    panner\n\n  # Randomize panner position incrementally.\n  randomizePan: (panner, coords) =>\n    [x, y, z] = coords\n    x = x + _.random -0.1, 0.1\n    y = y + _.random -0.1, 0.1\n    z = z + _.random -0.1, 0.1\n    panner.setPosition x, y, z\n\n  # Create a bandpass [filter](http://goo.gl/VpVHq) to limit\n  # the sound to a given frequency range.\n  createFilter: (freq) ->\n    filter = @context.createBiquadFilter()\n    filter.type = filter.BANDPASS\n    filter.frequency.value = freq\n    filter.Q.value = 150\n    filter\n\n  # Create a [script processor](http://goo.gl/eQEeW) to generate sound.\n  # `bufferSize` defines the sound quality (number of samples to be processed).\n  createNoiseGen: ->\n    bufferSize = 256\n    noiseGen = @context.createJavaScriptNode bufferSize, 0, 1\n    @noiseNodes.push noiseGen\n    noiseGen.onaudioprocess = @onAudioProcess\n    noiseGen\n\n  # On each `audioprocess` event, fill each sample in the `noiseGen`\n  # buffer with random numbers (multiplied so they are audible).\n  onAudioProcess: (e) =>\n    buffer = e.outputBuffer\n    out = buffer.getChannelData 0\n    bufferSize = buffer.length\n\n    for i in [0...bufferSize] by 1\n      out[i] = (random() * 2) - 1\n","module.exports = class Visualizer\n\n  { random, floor } = Math\n\n  constructor: (element) ->\n    throw 'Visualizer requires an element' unless element\n    @element = $(element)\n\n  render: ->\n    values = (_.times 2, @randomColor).join(',')\n    @element.css { background: \"-webkit-radial-gradient(#{values})\" }\n\n  randomColor: =>\n    rgb = (@randomNumber() for num in [0..2]).join(',')\n    \"rgb(#{rgb})\"\n\n  randomNumber: ->\n    floor random() * 255\n"]}